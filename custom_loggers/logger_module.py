""" Custom Logging Module """

import logging
import logging.handlers
import sys
from datetime import datetime
from pathlib import Path

# STREAM LOGGER CONFIGURATION / LOGGING EVENTS TO CONSOLE
# -------------------------------------------------------------------------------------------------

# Create a root logger
logger = logging.getLogger(__name__)
# Set logging level for root logger
logger.setLevel(logging.DEBUG)

# Create a stream handler and set logging level
stream_handler = logging.StreamHandler(sys.stdout)
stream_handler.setLevel(logging.DEBUG)

# # Create formatter
# formatter = logging.Formatter(
#     "%(asctime)s : %(processName)s : %(threadName)s : %(module)s : %(funcName)s :"
#     "%(levelname)s : %(message)s",
#     "%Y-%m-%d %H:%M:%S",
# )
formatter = logging.Formatter(
    "%(asctime)s : %(module)s : %(funcName)s : %(levelname)s : %(message)s",
    "%Y-%m-%d %H:%M:%S",
)

# Set formatter to stream handler and add it to root logger
stream_handler.setFormatter(formatter)
logger.addHandler(stream_handler)


# FILE HANDLER CONFIGURATION / LOGGING TO FILE
# -------------------------------------------------------------------------------------------------

# Location of the Logs Generated by the Script
LOGDIR_NAME = "ScriptLogs"

# PROD LOG Directory Path
# logdir_path = Path(r"D:\Directory\Path").joinpath(LOGDIR_NAME)

# TEST LOG Directory Path
# logdir_path = Path(r"D:\Directory\Path").joinpath(LOGDIR_NAME)

# Local LOG Directory Path
logdir_path = Path().cwd().joinpath(LOGDIR_NAME)

# Create the log director if it doesn't exist
try:
    logdir_path.mkdir(parents=True, exist_ok=True)
except FileNotFoundError:
    logger.error("Failed to create Log Folder at...")
    logger.error(f"'{logdir_path}'")
    logger.error("Cannot procced without logging events, Exiting the Script")
    sys.exit()
else:
    logger.info("Script Event Logs can be found at...")
    logger.info(f"'{logdir_path}'")


# Log file name
# %Y, %m and %d to append date to filename
script_log_filename = datetime.now().strftime("Log_%Y-%m-%d.log")
logfile_path = logdir_path.joinpath(script_log_filename)

# create a Rotating file handler
rot_file_handler = logging.handlers.RotatingFileHandler(
    filename=logfile_path, mode="a", maxBytes=1048576, backupCount=30, encoding="utf-8"
)

# Set logging level, formatter and add it to root logger
rot_file_handler.setLevel(logging.INFO)
rot_file_handler.setFormatter(formatter)
logger.addHandler(rot_file_handler)
logger.info("# Logging to file started #")
